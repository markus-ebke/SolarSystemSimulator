Property groups (in properties.py):
sssim_scn (type: SSSIMScene)
    - sim_time
    - time_exp
    - length_exp
    - planet_size_mult
    - draw_orbit
        
sssim_obj (type: SSSIMObject)
    - use sssim
    - object_type
    - show_info
    - center
    # not used for surfaces:
    - mass_mantissa
    - mass_exp
    
sssim_orbit (type: SSSIMOrbit)
    - eccentricity
    - distance_mantissa
    - distance_exp
    - inclination
    - asc_node
    - arg_periapsis
    - time_offset
    - use_user_period
    - use_frames
    - user_period_seconds
    - user_period_frames
    
sssim_rotation (type: SSSIMRotation)
    - use_rotation
    - use_frames
    - user_period_frames
    - user_period_seconds
    - axis_tilt
    - axis_direction
    - relative_to_orbit
    
sssim_calc (type: SSSIMCalculation)
    - use_driver
    - cyclic
    - frame_start
    - frame_end
    - frame_step
    (- motion_path <- not useful)
    
sssim_surface (type: SSSIMSurface)
    - calc_radius
    # used internally:
    (- object_proportions)
    (- original_scale)
    - radius_mantissa
    - radius_exp

TODO:
- 3D-Viewport panel in "Tools" or "SSSim" category?
- Add drivers and simulation time F-Curve automatically via bpy.app.handlers.load_post?
- Help text: activate for every panel with (?) in upper corner
- Add option for "advanced settings"?
- Switch order of "Ascending Node" and "Argument of Periapsis" (research the usual convention)
- See https://danielk.developer.irf.se/pyorb/ for more features:
	- Implement parabolic and hyperbolic trajectories (use EnumProperty for type "circular", "elliptical", "parabolic", "hyperbolic"?)
	- Add toggle (EnumProperty) for alternative input: specify periapsis (and eccentricity) instead of semi-major axis (and eccentricity), works better for e >= 1 orbits
	- Input cartesian coordinates, i.e. specify (x, y, z, vx, vy, vz, t0), but convert to kepler elements

LINKS:
http://www-spof.gsfc.nasa.gov/stargaze/Smap.htm
http://www-spof.gsfc.nasa.gov/stargaze/Skeplaws.htm
http://en.wikipedia.org/wiki/Orbital_elements
https://orbital-mechanics.space/intro.html
